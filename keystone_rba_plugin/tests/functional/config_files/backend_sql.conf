[database]
# The SQLAlchemy connection string to use to connect to the database.
# (string value)
#For a specific location file based SQLite use:
#connection = sqlite:////tmp/keystone.db
# In-Memory sqlite in sqlalchemy with 'sqlite://', else :memory:
#connection = sqlite://
#connection = sqlite:///:memory:
#connection = sqlite:///:memory:?cache=shared
#To Test MySQL:
#connection = mysql+pymysql://keystone:keystone@localhost/keystone?charset=utf8
#To Test PostgreSQL:
#connection = postgresql://keystone:keystone@localhost/keystone?client_encoding=utf8

# If True, SQLite uses synchronous mode. (boolean value)
#sqlite_synchronous = true
sqlite_synchronous = true

# The back end to use for the database. (string value)
#backend = sqlalchemy

# The SQLAlchemy connection string to use to connect to the slave database.
# (string value)
#slave_connection = <None>

# The SQL mode to be used for MySQL sessions. This option, including the
# default, overrides any server-set SQL mode. To use whatever SQL mode is set
# by the server configuration, set this to no value. Example: mysql_sql_mode=
# (string value)
#mysql_sql_mode = TRADITIONAL

# If True, transparently enables support for handling MySQL Cluster (NDB).
# (boolean value)
#mysql_enable_ndb = false

# Boolean, if True will enable the connection pool “pre-ping” feature that
# tests connections for liveness upon each checkout.
#pool_pre_ping = false
pool_pre_ping = true

# Connections which have been present in the connection pool longer than this
# number of seconds will be replaced with a new one the next time they are
# checked out from the pool. (integer value)
# connection_recycle_time = 3600
# connection_recycle_time = 200
connection_recycle_time = 166000
# connection_recycle_time = 100

# Maximum number of SQL connections to keep open in a pool.
# Setting a value of 0 indicates no limit. (integer value)
#max_pool_size = 5
# max_pool_size = 0
# max_pool_size = 15
max_pool_size = 50

# Maximum number of database connection retries during startup.
# Set to -1 to specify an infinite retry count. (integer value)
max_retries = 20
# max_retries = -1

# Interval between retries of opening a SQL connection. (integer value)
#retry_interval = 10
retry_interval = 10

# If set, use this value for max_overflow with SQLAlchemy. (integer value)
#max_overflow = 50
max_overflow = 50

# Number of seconds to wait before giving up on getting a connection
# from the pool. This is only used with QueuePool. This can be a float
# but is subject to the limitations of Python time functions which may
# not be reliable in the tens of milliseconds. (integer value)
# pool_timeout = 30
pool_timeout = 30

# Verbosity of SQL debugging information: 0=None, 100=Everything. (integer
# value)
# Minimum value: 0
# Maximum value: 100
#connection_debug = 0
connection_debug = 0

# Add Python stack traces to SQL as comment strings. (boolean value)
connection_trace = false
# connection_trace = true

# Enable the experimental use of database reconnect on connection lost.
# (boolean value)
#use_db_reconnect = false
use_db_reconnect = true

# Seconds between retries of a database transaction. (integer value)
#db_retry_interval = 1
db_retry_interval = 1

# If True, increases the interval between retries of a database operation
# up to db_max_retry_interval. (boolean value)
db_inc_retry_interval = true
#db_inc_retry_interval = false

# If db_inc_retry_interval is set, the maximum seconds between retries of a
# database operation. (integer value)
#db_max_retry_interval = 10
db_max_retry_interval = 30

# Maximum retries in case of connection error or deadlock error before error is
# raised. Set to -1 to specify an infinite retry count. (integer value)
db_max_retries = 30
# db_max_retries = -1

# Optional URL parameters to append onto the connection URL at connect time;
# specify as param1=value1&param2=value2&... (string value)
#connection_parameters =
# connection_parameters =


# Boolean that indicates that between each engine checkin event a sleep(0)
# will occur to allow other greenthreads to run (defaults to True)
#thread_checkin = true